#202102022 철학과 안혜원
#정상동작

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        dummy = Node("dummy")
        self.head = dummy
        self.tail = dummy
        self.current = None
        self.before = None
        self.num_of_data = 0

    def append(self, data):
        new_node = Node(data)
        self.tail.next = new_node
        self.tail = new_node
        self.num_of_data += 1

    def delete(self):
        pop_data = self.current.data
        if self.current is self.tail:
            self.tail = self.before
        self.before.next = self.current.next
        self.current = self.before
        self.num_of_data -= 1
        return pop_data

    def first(self):
        if self.num_of_data == 0:
            return None
        self.before = self.head
        self.current = self.head.next
        return self.current.data

    def next(self):
        if self.current.next is None:
            return None
        self.before = self.current
        self.current = self.current.next
        return self.current.data

    def size(self):
        return self.num_of_data

    def traverse_all(self):
        current = self.head
        output = "head -> "
        while current:
            output += "(" + str(current.data) + ") -> "
            current = current.next
        output += "null"
        print(output)

    
    def insert_at(self, position, new_data):
        if position < 1 or position > self.size() + 1:
            print("Invalid position")
        else:
            new_node = Node(new_data)
            if position == 1:
                new_node.next = self.head
                self.head = new_node
            else:
                current = self.head
                for i in range(position - 2):
                    current = current.next
                new_node.next = current.next
                current.next = new_node
            self.num_of_data += 1



    def remove(self, key):
        found = False
        count = 0
        self.first()

        while self.current:
            if self.current.data == key:
                self.delete()
                found = True
            else:
                self.before = self.current
                self.current = self.current.next
            count += 1

        if found:
            print(f"{count}번째 원소({key})를 모두 삭제했습니다.")
        else:
            print(f"해당하는 원소가 없습니다.")


# 새로운 LinkedList 객체 생성
my_list = LinkedList()

# append 메소드를 사용해 데이터 추가
my_list = LinkedList()
my_list.append(10)
my_list.append(20)
my_list.append(30)

# traverse_all 메소드를 사용해 모든 노드의 데이터 출력
my_list.traverse_all()
# 결과: head -> (10) -> (20) -> (30) -> null

# insert_at 메소드를 사용해 새로운 데이터 삽입
my_list.insert_at(2, 15)
my_list.insert_at(1, 5)
my_list.insert_at(7, 35)

# traverse_all 메소드를 사용해 모든 노드의 데이터 출력
my_list.traverse_all()
# 결과: head -> (5) -> (10) -> (15) -> (20) -> (30) -> (35) -> null


# remove 메소드를 사용해 데이터 삭제
my_list.remove(15)
my_list.remove(50)

# traverse_all 메소드를 사용해 모든 노드의 데이터 출력
my_list.traverse_all()
# 결과: '15' 값이 삭제되었습니다.
#       해당하는 원소가 없습니다.
#       head -> (5) -> (10) -> (20) -> (30) -> (35) -> null